import telebot
from telebot.types import Message, ReplyKeyboardMarkup
from dotenv import load_dotenv
from os import getenv
import json
from steps import STEPS, msg, choices, img
from utils import open_img
load_dotenv()
token = getenv("BOT_TOKEN")
bot = telebot.TeleBot(token)

def load_data() -> dict:
    """–§—É–Ω–∫—Ü–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö –∏–∑ json"""
    try:
        with open("data.json", "r", encoding="utf-8") as file:
            return json.load(file)
    except (FileNotFoundError, json.decoder.JSONDecodeError):
        return {}


def save_data(data: dict):
    """–§—É–Ω–∫—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –≤ json"""
    with open("data.json", "w", encoding="utf-8") as file:
        json.dump(data, file, indent=2, ensure_ascii=False)



user_data = load_data()

@bot.message_handler(commands=['start'])
def start_handler(message: Message):
    keyboard = ReplyKeyboardMarkup(resize_keyboard=True)
    msg = (f"–ü—Ä–∏–≤–µ—Ç, {message.from_user.username}! \n"
           "–ü—Ä–µ–¥–∏—Å—Ç–æ—Ä–∏—è –∫ –∏–≥—Ä–µ:\n"
           "–í–∞—à –ø–µ—Ä—Å–æ–Ω–∞–∂ - –≠–¥–≤–∏–Ω, –º–æ–ª–æ–¥–æ–π –¥—Ä—É–∏–¥, –∫–æ—Ç–æ—Ä—ã–π –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è –≤ –ú—Ä–∞—á–Ω—ã–π –ª–µ—Å –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –≤–∞–∂–Ω–æ–π –º–∏—Å—Å–∏–∏.\n"
    "–û–Ω —è–≤–ª—è–µ—Ç—Å—è –ø–æ—Å–ª–µ–¥–Ω–∏–º –∏–∑ –¥—Ä–µ–≤–Ω–µ–≥–æ –æ—Ä–¥–µ–Ω–∞ –¥—Ä—É–∏–¥–æ–≤, –∏ –µ–≥–æ —Ü–µ–ª—å - –Ω–∞–π—Ç–∏ –º–∏—Å—Ç–∏—á–µ—Å–∫—É—é —Ä–µ–ª–∏–∫–≤–∏—é, –∏–∑–≤–µ—Å—Ç–Ω—É—é –∫–∞–∫ ‚Äú–°–µ—Ä–¥—Ü–µ –ª–µ—Å–∞‚Äù.\n"
    "–≠–¥–≤–∏–Ω - –º—É–¥—Ä—ã–π –∏ –æ–ø—ã—Ç–Ω—ã–π –º–∞–≥, –æ–¥–Ω–∞–∫–æ –æ–Ω –Ω–µ –æ–±–ª–∞–¥–∞–µ—Ç –≥—Ä—É–±–æ–π —Å–∏–ª–æ–π –≤–æ–∏–Ω–∞. –ï–≥–æ –æ—Ä—É–∂–∏–µ - —ç—Ç–æ –µ–≥–æ –∑–Ω–∞–Ω–∏—è –∏ –Ω–∞–≤—ã–∫–∏, –∫–æ—Ç–æ—Ä—ã–µ –ø–æ–∑–≤–æ–ª—è—é—Ç –µ–º—É —É–ø—Ä–∞–≤–ª—è—Ç—å –ø—Ä–∏—Ä–æ–¥–æ–π –∏ —Å–æ–∑–¥–∞–≤–∞—Ç—å –º–∞–≥–∏—á–µ—Å–∫–∏–µ —â–∏—Ç—ã.\n"
    "–í —Å–≤–æ–µ–º –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏–∏ –æ–Ω –≤—Å—Ç—Ä–µ—á–∞–µ—Ç –º–Ω–æ–∂–µ—Å—Ç–≤–æ –∑–ª—ã—Ö —Å—É—â–µ—Å—Ç–≤, –∏ –≤—Å–µ –æ–Ω–∏ –ø—ã—Ç–∞—é—Ç—Å—è –ø–æ–º–µ—à–∞—Ç—å –µ–º—É –¥–æ—Å—Ç–∏—á—å —Å–≤–æ–µ–π —Ü–µ–ª–∏.\n")

    user_id = message.from_user.id
    if str(user_id) not in user_data:
        user_data[str(user_id)] = "–ª–æ–∫–∞—Ü–∏—è0"
        save_data(user_data)

    if user_data[str(user_id)] != "–ª–æ–∫–∞—Ü–∏—è0":
        msg += "–õ–µ—Ç–∏–º –¥–∞–ª—å—à–µ –Ω–∞ –ø—Ä–∏–∫–ª—é—á–µ–Ω–∏—è,–∏–ª–∏ –∑–∞–Ω–æ–≤–æ –Ω–∞—á–Ω—ë–º?"
        keyboard.add("–ù–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ", "–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å")
    else:
        msg += "–°–∫–æ—Ä–µ–µ –Ω–∞—á–∏–Ω–∞–π —É–∂–µ!"
        keyboard.add("–ù–∞—á–∞—Ç—å –ø—Ä–∏–∫–ª—é—á–µ–Ω–∏—è!")

    bot.send_photo(
        chat_id=user_id,
        photo=open_img("media/let's go.jpg"),
        caption=msg,
        reply_markup=keyboard,
    )

def filter_start_choice(message: Message):
    keywords = ['–ù–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ', '–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å', '–ù–∞—á–∞—Ç—å –ø—Ä–∏–∫–ª—é—á–µ–Ω–∏—è!']
    return message.text in keywords

def send_next_quest_step(user_id):
    current_step = user_data[str(user_id)]
    msg, choices, img = STEPS[current_step]

    keyboard = ReplyKeyboardMarkup(resize_keyboard=True)
    keyboard.add(*choices)

    bot.send_photo(
        chat_id=user_id,
        photo=open_img(img),
        caption=msg,
        reply_markup=keyboard,
    )

@bot.message_handler(func=filter_start_choice)
def handler_start_choices(message: Message):
    user_id = message.from_user.id
    current_choice = message.text

    if current_choice == '–ù–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ':
        user_data[str(user_id)] = "–ª–æ–∫–∞—Ü–∏—è0"
        save_data(user_data)

    send_next_quest_step(user_id)


@bot.message_handler(content_types=["text"])
def handler_users_answers(message: Message):
    user_id = message.from_user.id
    current_step = user_data[str(user_id)]
    available_choices = STEPS[current_step][1]
    current_choice = message.text

    if current_choice not in available_choices:
        bot.send_message(
            chat_id=user_id,
            text='–≤—ã–±–µ—Ä–∏ —á—Ç–æ-—Ç–æ –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω–æ–≥–æ...',
        )
        return
    if current_choice in ['–ü–æ–±–µ–¥–∞', '–î–∞–ª–µ–µ']:
        send_end_message(message)
    else:
        user_data[str(user_id)] = current_choice
        save_data(user_data)
        send_next_quest_step(user_id)

def repeatgame(message: Message):
    user_id = message.from_user.id
    msg = '—Ö–æ—á–µ—à—å —Å—ã–≥—Ä–∞—Ç—å –ø–æ –Ω–æ–≤–æ–π?'
    current_choices = message.text
    keyboard = ReplyKeyboardMarkup(resize_keyboard=True)
    keyboard.add("–ù–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ")
    user_data[str(user_id)] = '–ª–æ–∫–∞—Ü–∏—è0'
    save_data(user_data)

    bot.send_message(
        chat_id=user_id,
        text=msg,
        reply_markup=keyboard,
    )
def send_end_message(message: Message):
    user_id = message.from_user.id
    current_choices = message.text

    if current_choices == "–ü–æ–±–µ–¥–∞":
        msg = '—Ç—ã –≤—ã–π–≥—Ä–∞–ª! —Ç—ã –º–æ–ª–æ–¥–µ—Ü!'
        img = 'media/photoforwin.jpg'
    else:
        msg = '–≤–∞—Å —Å–∫—É—à–∞–ª–∏ ... üò•'
        img = 'media/photoforlose.jpg'
    user_data[str(user_id)] = '–ª–æ–∫–∞—Ü–∏—è0'
    save_data(user_data)

    bot.send_photo(
        chat_id=user_id,
        photo=open_img(img),
        caption=msg,
    )
    repeatgame(message)



if __name__ == '__main__':
    bot.polling( )
